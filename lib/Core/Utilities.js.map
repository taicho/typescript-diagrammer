{"version":3,"sources":["lib/Core/Utilities.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,8BAA0B,iBAAiB,CAAC,CAAA;AAC5C,iCAA6B,oBAAoB,CAAC,CAAA;AAMlD,mBAA0B,GAAG,EAAE,IAAI;IAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAC1D,CAAC;AAFe,iBAAS,YAExB,CAAA;AAED,6BAAoC,KAAgB;IAChD,IAAI,QAAQ,GAAuB,EAAE,CAAC;IACtC,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,KAAK,CAAC,CAAC,CAAC;QACrB,IAAI,IAAI,GAAG,KAAK,CAAC,MAAI,CAAC,CAAC;QACvB,QAAQ,CAAC,IAAI,CAAC,IAAI,6BAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,MAAM,CAAC,QAAQ,CAAC;AACpB,CAAC;AAPe,2BAAmB,sBAOlC,CAAA;AAED,sBAA6B,GAAG,EAAE,KAAsB,EAAE,MAAM;IAAhE,iBAmBC;IAlBG,IAAI,QAAQ,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACnC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC;QACf,IAAI,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;QAC1B,IAAI,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;YACtB,KAAI,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACtB,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACzB,IAAI,QAAQ,GAAG,IAAI,0BAAa,CAAC,IAAI,CAAC,CAAC;gBACvC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;YACD,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACf,IAAI,QAAQ,GAAG,IAAI,0BAAa,CAAC,IAAI,CAAC,CAAC;gBACvC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;QACL,CAAC;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAnBe,oBAAY,eAmB3B,CAAA","file":"Utilities.js","sourcesContent":["import * as fs from \"fs\";\nimport ProcessorFile from \"./ProcessorFile\";\nimport SerializableNode from \"./SerializableNode\";\nimport { INodeList } from \"./INodeList\";\n\n\n\n\nexport function randomInt(low, high) {\n    return Math.floor(Math.random() * (high - low) + low);\n}\n\nexport function toSerializableNodes(nodes: INodeList) {\n    let newNodes: SerializableNode[] = [];\n    for (let name in nodes) {\n        let item = nodes[name];\n        newNodes.push(new SerializableNode(item));\n    }\n    return newNodes;\n}\n\nexport function getFilePaths(dir, files: ProcessorFile[], filter) {\n    let fileTree = fs.readdirSync(dir);\n    fileTree.forEach((f) => {\n        let path = dir + \"\\\\\" + f;\n        let fStat = fs.lstatSync(path);\n        if (fStat.isDirectory()) {\n            this.getFilePaths(path, files, filter);\n        }\n        else if (fStat.isFile()) {\n            if (filter && filter(path)) {\n                let procFile = new ProcessorFile(path);\n                files.push(procFile);\n            }\n            else if (!filter) {\n                let procFile = new ProcessorFile(path);\n                files.push(procFile);\n            }\n        }\n    });\n}"]}