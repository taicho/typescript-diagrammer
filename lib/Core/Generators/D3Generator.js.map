{"version":3,"sources":["lib/Core/Generators/D3Generator.ts"],"names":[],"mappings":";AAAA;IAAA;IAgHA,CAAC;IAAD,kBAAC;AAAD,CAhHA,AAgHC,IAAA;AAhHY,mBAAW,cAgHvB,CAAA","file":"D3Generator.js","sourcesContent":["export class D3Generator {\n\n    // private static toD3Nodes(nodeList: NodeList, name: string, size: number = null) {\n    //     var root = { name: name, children: [], size: size };\n    //     if (nodeList) {\n    //         for (var id in nodeList) {\n    //             var nodeItem = nodeList[id];\n    //             root.children.push(this.toD3Nodes(nodeItem.Children, nodeItem.Name, Utilities.randomInt(10, 2000)));\n    //         }\n    //     }\n    //     return root;\n    // }\n\n    // static createLocTree(processor: Processor) {\n    //     processor.execute();\n    //     processor.applyLoc();\n    //     var nodeList = processor.Nodes;\n\n\n\n\n\n\n\n\n    //     var w = 5000 - 80,\n    //         h = 5000 - 180,\n    //         x = d3.scale.linear().range([0, w]),\n    //         y = d3.scale.linear().range([0, h]),\n    //         color = d3.scale.category20c(),\n    //         root,\n    //         node;\n\n    //     var treemap = d3.layout.treemap()\n    //         .round(false)\n    //         .size([w, h])\n    //         .sticky(true)\n    //         .value(function (d) { return d.size; });\n\n    //     root = this.toD3Nodes(nodeList, \"Root\", Utilities.randomInt(10, 2000));\n\n    //     var nodes = <any[]>treemap.nodes(root)\n    //         .filter(function (d) { return !d.children; });\n\n    //     var doc = builder.create({ svg: { \"@width\": w, \"@height\": h } });\n    //     var group = doc.ele({ \"g\": { \"@transform\": \"translate(0.5,0.5)\" } });\n\n    //     nodes.forEach((node) => {\n    //         var innerGroup = group.ele({\n    //             g: {\n    //                 \"@transform\": `translate(${node.x},${node.y})`,\n    //                 rect: {\n    //                     \"@width\": node.dx - 1,\n    //                     \"@height\": node.dy - 1,\n    //                     \"@fill\": color(node.name),\n    //                 },\n    //                 text: {\n    //                     \"@x\": node.dx / 2,\n    //                     \"@y\": node.dy / 2,\n    //                     \"@dy\": \"0.35em\",\n    //                     \"@text-anchor\": \"middle\",\n    //                     \"#text\": node.name\n    //                 }\n    //             }\n    //         });\n\n\n    //     });\n    //     var result = doc.end({ pretty: true });\n\n\n\n    //     //var svg = d3.select(\"body\").append(\"div\")\n    //     //    .attr(\"class\", \"chart\")\n    //     //    .style(\"width\", w + \"px\")\n    //     //    .style(\"height\", h + \"px\")\n    //     //    .append(\"svg:svg\")\n    //     //    .attr(\"width\", w)\n    //     //    .attr(\"height\", h)\n    //     //    .append(\"svg:g\")\n    //     //    .attr(\"transform\", \"translate(.5,.5)\");\n\n    //     //var cell = svg.selectAll(\"g\")\n    //     //    .data(nodes)\n    //     //    .enter().append(\"svg:g\")\n    //     //    .attr(\"class\", \"cell\")\n    //     //    .attr(\"transform\", function (d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; }); \n\n    //     //cell.append(\"svg:rect\")\n    //     //    .attr(\"width\", function (d) { return d.dx - 1; })\n    //     //    .attr(\"height\", function (d) { return d.dy - 1; })\n    //     //    .style(\"fill\", function (d) { return color(d.parent.name); });\n\n    //     //cell.append(\"svg:text\")\n    //     //    .attr(\"x\", function (d) { return d.dx / 2; })\n    //     //    .attr(\"y\", function (d) { return d.dy / 2; })\n    //     //    .attr(\"dy\", \".35em\")\n    //     //    .attr(\"text-anchor\", \"middle\")\n    //     //    .text(function (d) { return d.name; })\n    //     //    .style(\"opacity\", function (d) { d.w = this.getComputedTextLength(); return d.dx > d.w ? 1 : 0; });\n\n    //     //var html = d3.select('body').html();\n\n\n    // }\n\n    // private static position(thisContext) {\n    //     thisContext.style(\"left\", function (d) { return d.x + \"px\"; })\n    //         .style(\"top\", function (d) { return d.y + \"px\"; })\n    //         .style(\"width\", function (d) { return Math.max(0, d.dx - 1) + \"px\"; })\n    //         .style(\"height\", function (d) { return Math.max(0, d.dy - 1) + \"px\"; });\n    // }\n}"]}