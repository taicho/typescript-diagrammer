{"version":3,"sources":["lib/Core/Generators/DgmlGenerator.ts"],"names":[],"mappings":"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","file":"DgmlGenerator.js","sourcesContent":["import { IGenerator } from \"./IGenerator\";\nimport { INodeList } from \"../INodeList\";\nimport * as Utilities from \"../Utilities\";\nimport SerializableNode from \"../SerializableNode\";\nimport * as builder from \"xmlbuilder\";\nexport default class DgmlGenerator implements IGenerator {\n\n\n    generate(nodes: INodeList): string {\n        return this.getNodeXml(nodes);\n    }\n\n    getNodeXml(nodes: INodeList) {\n        const completeNodes = nodes;\n\n        const objectNodes = Utilities.toSerializableNodes(completeNodes);\n        const nodeMap: { [index: number]: SerializableNode } = {};\n        objectNodes.forEach((n) => {\n            nodeMap[n.Id] = n;\n        });\n        const doc = builder.create(\"DirectedGraph\");\n        const nodesEle = doc.ele(\"Nodes\");\n        const linksEle = doc.ele(\"Links\");\n        for (let id in nodeMap) {\n            let node = nodeMap[id];\n            switch (node.KindName) {\n                case \"Class\":\n                case \"Interface\":\n                    if (node.KindName === \"Class\" || node.KindName === \"Interface\") {\n                        nodesEle.ele(\"Node\", {\n                            Category: node.KindName === \"Class\" ? \"CodeSchema_Class\" : \"CodeSchema_Interface\", Group: \"Collapsed\", Id: id, Label: node.KindName === \"Class\" ? node.Name : \"Interface:\" + node.Name\n                        });\n                    }\n                    node.BaseTypes.forEach((baseNode) => {\n                        linksEle.ele(\"Link\", { Source: baseNode, Target: id });\n                    });\n                    break;\n                case \"Module\":\n                    nodesEle.ele(\"Node\", {\n                        Id: id, Label: node.Name, Group: \"Expanded\", Category: \"CodeSchema_Namespace\"\n                    });\n                    break;\n            }\n            if (node.Parent) {\n                linksEle.ele(\"Link\", { Source: node.Parent, Target: id, Category: \"Contains\" });\n            }\n\n\n        }\n        doc.att(\"xmlns\", \"http://schemas.microsoft.com/vs/2009/dgml\");\n        this.addStyles(doc);\n        return doc.end({ pretty: true });\n    }\n\n    addStyles(xmlRoot) {\n        let styles = xmlRoot.ele(\"Styles\");\n        styles.ele({\n            \"#list\": [{\n                Style: {\n                    TargetType: \"Node\",\n                    GroupLabel: \"Class\",\n                    ValueLabel: \"Has category\",\n                    Condition: { Expression: \"HasCategory('CodeSchema_Type')\" },\n                    \"#list\": [\n                        { Setter: { Property: \"Background\", Value: \"#FF1382CE\" } },\n                        { Setter: { Property: \"Stroke\", Value: \"#FF1382CE\" } },\n                        { Setter: { Property: \"Icon\", Value: \"CodeSchema_Class\" } },\n                    ]\n                }\n            },\n            {\n                Style: {\n                    TargetType: \"Node\",\n                    GroupLabel: \"Namespace\",\n                    ValueLabel: \"Has category\",\n                    Condition: { Expression: \"HasCategory('CodeSchema_Namespace')\" },\n                    \"#list\": [\n                        { Setter: { Property: \"Background\", Value: \"#FF0E619A\" } },\n                        { Setter: { Property: \"Stroke\", Value: \"#FF0E619A\" } },\n                        { Setter: { Property: \"Icon\", Value: \"CodeSchema_Namespace\" } },\n                    ]\n                }\n            },\n            {\n                Style: {\n                    TargetType: \"Node\",\n                    GroupLabel: \"Interface\",\n                    ValueLabel: \"Has category\",\n                    Condition: { Expression: \"HasCategory('CodeSchema_Interface')\" },\n                    \"#list\": [\n                        { Setter: { Property: \"Background\", Value: \"#FF1382CE\" } },\n                        { Setter: { Property: \"Stroke\", Value: \"#FF1382CE\" } },\n                        { Setter: { Property: \"Icon\", Value: \"CodeSchema_Interface\" } },\n                    ]\n                }\n            }\n            ]\n        });\n    }\n}"]}