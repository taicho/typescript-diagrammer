{"version":3,"names":[],"mappings":"","sources":["Core/DiagramLanguageServiceHost.js"],"sourcesContent":["\"use strict\";\nvar ts = require(\"typescript\");\nvar DiagramLanguageServiceHost = (function () {\n    function DiagramLanguageServiceHost() {\n        var _this = this;\n        this.Files = {};\n        this.log = function (_) { };\n        this.trace = function (_) { };\n        this.error = function (_) { };\n        this.getScriptIsOpen = function (_) { return true; };\n        this.getCurrentDirectory = function () { return \"\"; };\n        this.getDefaultLibFileName = function (options) { return \"lib\"; };\n        this.getScriptVersion = function (fileName) { return _this.Files[fileName].ver.toString(); };\n        this.getScriptSnapshot = function (fileName) { return _this.Files[fileName].file; };\n    }\n    DiagramLanguageServiceHost.prototype.getCompilationSettings = function () {\n        if (this.Options) {\n            return this.Options;\n        }\n        return ts.getDefaultCompilerOptions();\n    };\n    DiagramLanguageServiceHost.prototype.getScriptFileNames = function () {\n        var names = [];\n        for (var name_1 in this.Files) {\n            if (this.Files.hasOwnProperty(name_1)) {\n                names.push(name_1);\n            }\n        }\n        return names;\n    };\n    DiagramLanguageServiceHost.prototype.addFile = function (fileName, body) {\n        var snap = ts.ScriptSnapshot.fromString(body);\n        snap.getChangeRange = function (_) { return undefined; };\n        var existing = this.Files[fileName];\n        if (existing) {\n            this.Files[fileName].ver++;\n            this.Files[fileName].file = snap;\n        }\n        else {\n            this.Files[fileName] = { ver: 1, file: snap };\n        }\n    };\n    return DiagramLanguageServiceHost;\n}());\nexports.__esModule = true;\nexports[\"default\"] = DiagramLanguageServiceHost;\n"],"file":"DiagramLanguageServiceHost.js"}