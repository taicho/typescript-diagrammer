{"version":3,"sources":["lib/Core/DiagramLanguageServiceHost.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AACjC;IAAA;QAAA,iBA2CC;QA1CG,UAAK,GAAsE,EAAE,CAAC;QAI9E,QAAG,GAAG,UAAA,CAAC,IAAM,CAAC,CAAC;QACf,UAAK,GAAG,UAAA,CAAC,IAAM,CAAC,CAAC;QACjB,UAAK,GAAG,UAAA,CAAC,IAAM,CAAC,CAAC;QAOjB,oBAAe,GAAG,UAAA,CAAC,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC;QAC5B,wBAAmB,GAAG,cAAM,OAAA,EAAE,EAAF,CAAE,CAAC;QAC/B,0BAAqB,GAAG,UAAC,OAAO,IAAK,OAAA,KAAK,EAAL,CAAK,CAAC;QAE3C,qBAAgB,GAAG,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAnC,CAAmC,CAAC;QACnE,sBAAiB,GAAG,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAzB,CAAyB,CAAC;IAwB9D,CAAC;IAnCG,2DAAsB,GAAtB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;QACD,MAAM,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC;IAC1C,CAAC;IAQD,uDAAkB,GAAlB;QACI,IAAI,KAAK,GAAa,EAAE,CAAC;QACzB,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;gBAClC,KAAK,CAAC,IAAI,CAAC,MAAI,CAAC,CAAC;YACrB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAGD,4CAAO,GAAP,UAAQ,QAAgB,EAAE,IAAY;QAClC,IAAI,IAAI,GAAG,EAAE,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,cAAc,GAAG,UAAA,CAAC,IAAI,OAAA,SAAS,EAAT,CAAS,CAAC;QACrC,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;QACrC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAClD,CAAC;IACL,CAAC;IACL,iCAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CD;+CA2CC,CAAA","file":"DiagramLanguageServiceHost.js","sourcesContent":["import * as ts from \"typescript\";\nexport default class DiagramLanguageServiceHost implements ts.LanguageServiceHost {\n    Files: { [fileName: string]: { file: ts.IScriptSnapshot; ver: number } } = {};\n    Options: ts.CompilerOptions;\n\n\n    log = _ => { };\n    trace = _ => { };\n    error = _ => { };\n    getCompilationSettings() {\n        if (this.Options) {\n            return this.Options;\n        }\n        return ts.getDefaultCompilerOptions();\n    }\n    getScriptIsOpen = _ => true;\n    getCurrentDirectory = () => \"\";\n    getDefaultLibFileName = (options) => \"lib\";\n\n    getScriptVersion = fileName => this.Files[fileName].ver.toString();\n    getScriptSnapshot = fileName => this.Files[fileName].file;\n\n    getScriptFileNames(): string[] {\n        let names: string[] = [];\n        for (let name in this.Files) {\n            if (this.Files.hasOwnProperty(name)) {\n                names.push(name);\n            }\n        }\n        return names;\n    }\n\n\n    addFile(fileName: string, body: string) {\n        let snap = ts.ScriptSnapshot.fromString(body);\n        snap.getChangeRange = _ => undefined;\n        let existing = this.Files[fileName];\n        if (existing) {\n            this.Files[fileName].ver++;\n            this.Files[fileName].file = snap;\n        } else {\n            this.Files[fileName] = { ver: 1, file: snap };\n        }\n    }\n}"]}