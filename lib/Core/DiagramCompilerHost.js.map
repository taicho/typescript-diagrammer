{"version":3,"names":[],"mappings":"","sources":["Core/DiagramCompilerHost.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ts = require(\"typescript\");\nvar DiagramLanguageServiceHost_1 = require(\"./DiagramLanguageServiceHost\");\nvar DiagramCompilerHost = (function (_super) {\n    __extends(DiagramCompilerHost, _super);\n    function DiagramCompilerHost() {\n        _super.apply(this, arguments);\n        this.getCanonicalFileName = function (fileName) { return fileName; };\n        this.useCaseSensitiveFileNames = function () { return true; };\n        this.getNewLine = function () { return \"\\n\"; };\n    }\n    DiagramCompilerHost.prototype.getSourceFile = function (filename, languageVersion, onError) {\n        var f = this.Files[filename];\n        if (!f)\n            return null;\n        var sourceFile = ts.createLanguageServiceSourceFile(filename, f.file, 1 /* ES5 */, f.ver.toString(), true);\n        return sourceFile;\n    };\n    DiagramCompilerHost.prototype.writeFile = function (filename, data, writeByteOrderMark, onError) {\n    };\n    DiagramCompilerHost.prototype.fileExists = function (str) {\n        return true;\n    };\n    DiagramCompilerHost.prototype.readFile = function (str) {\n        return \"\";\n    };\n    return DiagramCompilerHost;\n}(DiagramLanguageServiceHost_1[\"default\"]));\nexports.__esModule = true;\nexports[\"default\"] = DiagramCompilerHost;\n"],"file":"DiagramCompilerHost.js"}