{"version":3,"sources":["lib/Core/DiagramCompilerHost.ts"],"names":[],"mappings":";;;;;;AAAA,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AACjC,2CAAuC,8BAA8B,CAAC,CAAA;AACtE;IAAiD,uCAA0B;IAA3E;QAAiD,8BAA0B;QASvE,yBAAoB,GAAG,UAAC,QAAgB,IAAK,OAAA,QAAQ,EAAR,CAAQ,CAAC;QACtD,8BAAyB,GAAG,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;QACvC,eAAU,GAAG,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;QAUxB,mBAAc,GAAG,UAAC,IAAI,IAAK,OAAA,EAAE,EAAF,CAAE,CAAC;IAElC,CAAC;IAtBG,2CAAa,GAAb,UAAc,QAAgB,EAAE,eAAgC,EAAE,OAAmC;QACjG,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAAC,MAAM,CAAC,IAAI,CAAC;QACpB,IAAI,UAAU,GAAG,EAAE,CAAC,+BAA+B,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;QACnH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IACD,uCAAS,GAAT,UAAU,QAAgB,EAAE,IAAY,EAAE,kBAA2B,EAAE,OAAmC;IAC1G,CAAC;IAKD,wCAAU,GAAV,UAAW,GAAW;QAClB,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,sCAAQ,GAAR,UAAS,GAAW;QAChB,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAIL,0BAAC;AAAD,CAvBA,AAuBC,CAvBgD,uCAA0B,GAuB1E;AAvBD;wCAuBC,CAAA","file":"DiagramCompilerHost.js","sourcesContent":["import * as ts from \"typescript\";\nimport DiagramLanguageServiceHost from \"./DiagramLanguageServiceHost\";\nexport default class DiagramCompilerHost extends DiagramLanguageServiceHost implements ts.CompilerHost {\n    getSourceFile(filename: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void): ts.SourceFile {\n        let f = this.Files[filename];\n        if (!f) return null;\n        let sourceFile = ts.createLanguageServiceSourceFile(filename, f.file, ts.ScriptTarget.ES5, f.ver.toString(), true);\n        return sourceFile;\n    }\n    writeFile(filename: string, data: string, writeByteOrderMark: boolean, onError?: (message: string) => void): void {\n    }\n    getCanonicalFileName = (fileName: string) => fileName;\n    useCaseSensitiveFileNames = () => true;\n    getNewLine = () => \"\\n\";\n\n    fileExists(str: string) {\n        return true;\n    }\n\n    readFile(str: string) {\n        return \"\";\n    }\n\n    getDirectories = (path) => [];\n\n}"]}