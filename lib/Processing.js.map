{"version":3,"names":[],"mappings":"","sources":["Processing.js"],"sourcesContent":["\"use strict\";\nvar tss = require(\"typescript\");\nvar DiagramLanguageServiceHost_1 = require(\"./Core/DiagramLanguageServiceHost\");\nvar DiagramCompilerHost_1 = require(\"./Core/DiagramCompilerHost\");\nvar ProcessorFile_1 = require(\"./Core/ProcessorFile\");\nvar NodeItem_1 = require(\"./Core/NodeItem\");\nvar ProcessorFile_2 = require(\"./Core/ProcessorFile\");\nvar Utilities = require(\"./Core/Utilities\");\nvar DgmlGenerator_1 = require(\"./Core/Generators/DgmlGenerator\");\nvar Processor = (function () {\n    function Processor() {\n        this.Nodes = null;\n        this.Items = null;\n        this.Processed = false;\n        this.Generator = new DgmlGenerator_1[\"default\"]();\n    }\n    Processor.fromDirectory = function (path) {\n        var x = new DiagramLanguageServiceHost_1[\"default\"]();\n        var processor = new Processor();\n        var files = [];\n        Utilities.getFilePaths(path, files, function (path) {\n            var pathLower = path.toLowerCase();\n            if (pathLower.indexOf(\"d.ts\") < 0 && pathLower.indexOf(\".ts\") >= 0) {\n                return true;\n            }\n            return false;\n        });\n        processor.Items = files;\n    };\n    Processor.fromFile = function (path) {\n        var processor = new Processor();\n        processor.Items = [new ProcessorFile_1[\"default\"](path)];\n        return processor;\n    };\n    Processor.fromString = function (str) {\n        var processor = new Processor();\n        processor.Items = [new ProcessorFile_2[\"default\"](str)];\n        return processor;\n    };\n    Processor.prototype.getAllNodes = function (sf) {\n        var nodes = [];\n        function allNodes(n) {\n            tss.forEachChild(n, function (n) { nodes.push(n); allNodes(n); return false; });\n        }\n        ;\n        allNodes(sf);\n        return nodes;\n    };\n    Processor.prototype.execute = function () {\n        if (!this.Processed) {\n            var fileNamePart = \"Output.ts\";\n            var source = this.getFileString();\n            var host = new DiagramCompilerHost_1[\"default\"]();\n            host.addFile(fileNamePart, source);\n            var program = tss.createProgram([fileNamePart], host.getCompilationSettings(), host);\n            var typeChecker = program.getTypeChecker();\n            var sourceFile = program.getSourceFile(fileNamePart);\n            var nodes = this.getAllNodes(sourceFile);\n            this.Processed = true;\n        }\n    };\n    Processor.prototype.getFileString = function () {\n        var fileString = \"\";\n        this.Items.forEach(function (file) {\n            var code = file.getText();\n            fileString += code;\n        });\n        return fileString;\n    };\n    Processor.prototype.emit = function () {\n        this.execute();\n        return this.Generator.generate(this.Nodes);\n    };\n    Processor.prototype.toJson = function () {\n        return JSON.stringify(Utilities.toSerializableNodes(this.Nodes));\n    };\n    // applyLoc() {\n    //     this.Files.forEach(function (file) {\n    //         let code = fs.readFileSync(file.Path).toString();\n    //         file.Loc = code.split(\"\\n\").filter((f) => { return f != \"\"; }).length;\n    //     });\n    // }\n    Processor.prototype.getDistinctNames = function (masterArr) {\n        var names = {};\n        masterArr.forEach(function (item) {\n            if (!(item.name in names)) {\n                names[item.fullName] = item;\n            }\n        });\n        return names;\n    };\n    Processor.prototype.getName = function (nameObject, arr) {\n        if (arr === void 0) { arr = []; }\n        if (typeof (nameObject) === \"string\") {\n            arr.push(nameObject);\n        }\n        else if (nameObject.name) {\n            this.getName(nameObject.name, arr);\n        }\n        else if (nameObject.identifier) {\n            this.getName(nameObject.identifier, arr);\n        }\n        else if (nameObject.left) {\n            var n = nameObject;\n            this.getName(n.left, arr);\n            this.getName(n.right, arr);\n        }\n        else if (nameObject.text) {\n            this.getName(nameObject, arr);\n        }\n        // else if (nameObject instanceof tss.EntityName) {\n        //     let n = <tss.QualifiedName>nameObject;        \n        //     getName(n.left, arr);\n        //     getName(n.right, arr);\n        // }\n        // else if (nameObject instanceof tss.Identifier) {\n        //     let n = <tss.Identifier>nameObject;\n        //     arr.push(n.text());\n        // }\n        return arr.join(\".\");\n    };\n    Processor.prototype.buildNodes = function (items) {\n        var nodeList = {};\n        var _loop_1 = function(name_1) {\n            var item = items[name_1];\n            if (item.kind === 216 /* ModuleDeclaration */) {\n                var fullNameSplit = item.fullName.split(\".\");\n                var lastNode_1 = null;\n                var fullName_1 = [];\n                fullNameSplit.forEach(function (splitName) {\n                    fullName_1.push(splitName);\n                    var fullNameCurrent = fullName_1.join(\".\");\n                    var nodeItem = null;\n                    if (lastNode_1) {\n                        nodeItem = lastNode_1.Children[splitName];\n                    }\n                    else {\n                        nodeItem = nodeList[fullNameCurrent];\n                    }\n                    if (!nodeItem) {\n                        var newNode = new NodeItem_1[\"default\"]();\n                        nodeItem = newNode;\n                        newNode.Name = splitName;\n                        newNode.FullName = fullNameCurrent;\n                        newNode.KindName = \"Module\";\n                        newNode.Loc = item.loc;\n                        nodeList[newNode.FullName] = newNode;\n                        if (lastNode_1) {\n                            newNode.Parent = lastNode_1;\n                            lastNode_1.Children[newNode.Name] = newNode;\n                        }\n                    }\n                    lastNode_1 = nodeItem;\n                });\n            }\n        };\n        for (var name_1 in items) {\n            _loop_1(name_1);\n        }\n        for (var name_2 in items) {\n            var item = items[name_2];\n            if (item.kind === 212 /* ClassDeclaration */ || item.kind === 213 /* InterfaceDeclaration */) {\n                var classPath = item.fullName.replace(\".\" + item.name, \"\");\n                var parentNode = nodeList[classPath];\n                var newNode = new NodeItem_1[\"default\"]();\n                newNode.KindName = item.kind === 212 /* ClassDeclaration */ ? \"Class\" : \"Interface\";\n                newNode.FullName = item.fullName;\n                newNode.Loc = item.loc;\n                newNode.Name = item.name;\n                newNode.Parent = parentNode;\n                if (parentNode) {\n                    parentNode.Children[item.name] = newNode;\n                }\n                nodeList[newNode.FullName] = newNode;\n            }\n        }\n        return nodeList;\n    };\n    Processor.prototype.forEachSyntaxList = function (list, func) {\n        var count = list.length;\n        for (var i = 0; i < count; i++) {\n            func(list[i], i);\n        }\n    };\n    Processor.prototype.enumerate = function (unit, masterArr, lastModuleName) {\n        var _this = this;\n        if (masterArr === void 0) { masterArr = []; }\n        if (lastModuleName === void 0) { lastModuleName = \"\"; }\n        var modules = null;\n        var classes = null;\n        var kind = unit.kind();\n        var fullName = null;\n        var name = null;\n        if (lastModuleName) {\n            name = this.getName(unit);\n            fullName = lastModuleName + \".\" + name;\n        }\n        else {\n            fullName = this.getName(unit);\n            name = fullName;\n        }\n        var kindName = this.getKindName(kind);\n        switch (kind) {\n            case 216 /* ModuleDeclaration */:\n                var m = unit;\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: m.getEnd() - m.getStart() });\n                lastModuleName = fullName;\n                this.forEachSyntaxList(m.getChildren(), function (item) {\n                    _this.enumerate(item, masterArr, lastModuleName);\n                });\n                break;\n            case 212 /* ClassDeclaration */:\n                var c = unit;\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: c.getEnd() - c.getStart() });\n                this.forEachSyntaxList(c.getChildren(), function (item) {\n                    _this.enumerate(item, masterArr);\n                });\n                break;\n            case 213 /* InterfaceDeclaration */:\n                var ix = unit;\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: ix.getEnd() - ix.getStart() });\n                break;\n            case 209 /* VariableDeclaration */:\n                break;\n        }\n        return masterArr;\n    };\n    Processor.prototype.getKindName = function (kind) {\n        switch (kind) {\n            case 216 /* ModuleDeclaration */:\n                return \"Module\";\n            case 212 /* ClassDeclaration */:\n                return \"Class\";\n        }\n        return \"Unknown\";\n    };\n    Processor.prototype.enumerateAndFindDependencies = function (unit, items, nodes, lastModuleName, lastNode) {\n        var _this = this;\n        if (lastModuleName === void 0) { lastModuleName = \"\"; }\n        var modules = null;\n        var name = null;\n        var classes = null;\n        var kind = unit.kind();\n        var fullName = null;\n        if (lastModuleName) {\n            name = this.getName(unit);\n            fullName = lastModuleName + \".\" + name;\n        }\n        else {\n            fullName = this.getName(unit);\n            name = fullName;\n        }\n        var kindName = this.getKindName(kind);\n        switch (kind) {\n            case 246 /* SourceFile */:\n            case 216 /* ModuleDeclaration */:\n                var m = unit;\n                lastModuleName = fullName;\n                this.forEachSyntaxList(m.getChildren(), function (item) {\n                    _this.enumerateAndFindDependencies(item, items, nodes, lastModuleName);\n                });\n                break;\n            case 212 /* ClassDeclaration */:\n                var c = unit;\n                var currentNode_1 = nodes[fullName];\n                this.forEachSyntaxList(c.heritageClauses, function (item) {\n                    if (item.types) {\n                        for (var i = 0; i < item.types.length; i++) {\n                            var name_3 = _this.getName(item.types[i]);\n                            var newName = lastModuleName + \".\" + name_3;\n                            var node = nodes[newName];\n                            if (!node) {\n                                var alternateName = lastModuleName.substring(0, lastModuleName.lastIndexOf(\".\") + 1) + name_3;\n                                node = nodes[alternateName];\n                            }\n                            if (node) {\n                                currentNode_1.BaseTypes.push(node);\n                            }\n                        }\n                    }\n                });\n                this.forEachSyntaxList(c.getChildren(), function (item) {\n                    _this.enumerateAndFindDependencies(item, items, nodes, lastModuleName, currentNode_1);\n                });\n                break;\n            case 209 /* VariableDeclaration */:\n                break;\n        }\n        return nodes;\n    };\n    return Processor;\n}());\nexports.__esModule = true;\nexports[\"default\"] = Processor;\n"],"file":"Processing.js"}