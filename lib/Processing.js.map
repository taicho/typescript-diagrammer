{"version":3,"sources":["lib/Processing.ts"],"names":[],"mappings":"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","file":"Processing.js","sourcesContent":["import * as fs from \"fs\";\r\nimport * as tss from \"typescript\";\r\nimport DiagramLanguageServiceHost from \"./Core/DiagramLanguageServiceHost\";\r\nimport DiagramCompilerHost from \"./Core/DiagramCompilerHost\";\r\nimport { IProcessorItem } from \"./Core/IProcessorItem\";\r\nimport { IAstProcessedItem } from \"./Core/IAstProcessedItem\";\r\nimport { IAstEnumeratorItem } from \"./Core/IAstEnumeratorItem\";\r\nimport { INodeList } from \"./Core/INodeList\";\r\nimport ProcessorFile from \"./Core/ProcessorFile\";\r\nimport NodeItem from \"./Core/NodeItem\";\r\nimport ProcessorString from \"./Core/ProcessorFile\";\r\nimport SerializableNode from \"./Core/SerializableNode\";\r\nimport * as Utilities from \"./Core/Utilities\";\r\nimport { IGenerator } from \"./Core/Generators/IGenerator\";\r\nimport DgmlGenerator from \"./Core/Generators/DgmlGenerator\";\r\n\r\n\r\n\r\n\r\nexport default class Processor {\r\n    Nodes: INodeList = null;\r\n    Items: IProcessorItem[] = null;\r\n    Processed = false;\r\n    Generator: IGenerator = new DgmlGenerator();\r\n\r\n\r\n    static fromDirectory(path: string) {\r\n        let x = new DiagramLanguageServiceHost();\r\n        let processor = new Processor();\r\n        let files = [];\r\n        Utilities.getFilePaths(path, files, function (path) {\r\n            let pathLower = path.toLowerCase();\r\n            if (pathLower.indexOf(\"d.ts\") < 0 && pathLower.indexOf(\".ts\") >= 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        processor.Items = files;\r\n    }\r\n\r\n    static fromFile(path: string) {\r\n        let processor = new Processor();\r\n        processor.Items = [new ProcessorFile(path)];\r\n        return processor;\r\n    }\r\n\r\n    static fromString(str: string) {\r\n        let processor = new Processor();\r\n        processor.Items = [new ProcessorString(str)];\r\n        return processor;\r\n    }\r\n\r\n    getAllNodes(sf: tss.SourceFile): tss.Node[] {\r\n        let nodes: tss.Node[] = [];\r\n        function allNodes(n: tss.Node) {\r\n            tss.forEachChild(n, n => { nodes.push(n); allNodes(n); return false; });\r\n        };\r\n        allNodes(sf);\r\n        return nodes;\r\n    }\r\n\r\n    testCollections(typeChecker: tss.TypeChecker, nodes: tss.Node[]) {\r\n        let symbols = nodes.map(function (v) { return typeChecker.getSymbolAtLocation(v); }).filter((f) => f != null);\r\n        let types = symbols.map((s) => { return typeChecker.getDeclaredTypeOfSymbol(s); }).filter((f) => f != null);\r\n    }\r\n\r\n    execute() {\r\n        if (!this.Processed) {\r\n            let fileNamePart = \"Output.ts\";\r\n            let source = this.getFileString();\r\n            let host = new DiagramCompilerHost();\r\n            host.addFile(fileNamePart, source);\r\n            let program = tss.createProgram([fileNamePart], host.getCompilationSettings(), host);\r\n            let typeChecker = program.getTypeChecker();\r\n            let sourceFile = program.getSourceFile(fileNamePart);\r\n            let nodes = this.getAllNodes(sourceFile);\r\n            let results = this.buildNodesNew(nodes);\r\n            this.testCollections(typeChecker, nodes);\r\n            this.Processed = true;\r\n            // let syntaxTree = tss.Parser.parse(fileNamePart, tss.SimpleText.fromString(source), /*isDeclaration*/ true,\r\n            //     new tss.ParseOptions(tss.LanguageVersion.EcmaScript5, /*autoSemicolon*/ true));                \r\n            // let cs = new tss.CompilationSettings();\r\n            // cs.codeGenTarget = tss.LanguageVersion.EcmaScript5;\r\n            // let ics = tss.ImmutableCompilationSettings.fromCompilationSettings(cs);\r\n            // let sourceUnit = tss.SyntaxTreeToAstVisitor.visit(syntaxTree, fileNamePart, ics, /*incrementalAST*/ false);                \r\n            // let masterArr = this.enumerate(sourceUnit);\r\n            // let names = this.getDistinctNames(masterArr);\r\n            // let nodes = this.buildNodes(names);\r\n            // let completeNodes = this.enumerateAndFindDependencies(sourceUnit, names, nodes);\r\n            // this.Nodes = completeNodes;\r\n            // this.Processed = true;\r\n        }\r\n    }\r\n\r\n    protected getFileString() {\r\n        let fileString = \"\";\r\n        this.Items.forEach(function (file) {\r\n            let code = file.getText();\r\n            fileString += code;\r\n        });\r\n        return fileString;\r\n    }\r\n\r\n    emit(): string {\r\n        this.execute();\r\n        return this.Generator.generate(this.Nodes);\r\n    }\r\n\r\n\r\n\r\n    toJson() {\r\n        return JSON.stringify(Utilities.toSerializableNodes(this.Nodes));\r\n    }\r\n\r\n    getAllNames(typeChecker: tss.TypeChecker, nodes: tss.Node[]) {\r\n        return nodes.map((n) => typeChecker.getSymbolAtLocation(n).name);\r\n    }\r\n\r\n\r\n    // applyLoc() {\r\n    //     this.Files.forEach(function (file) {\r\n    //         let code = fs.readFileSync(file.Path).toString();\r\n    //         file.Loc = code.split(\"\\n\").filter((f) => { return f != \"\"; }).length;\r\n    //     });\r\n    // }\r\n    getDistinctNames(masterArr: any[]): IAstProcessedItem {\r\n        let names: IAstProcessedItem = {};\r\n        masterArr.forEach((item) => {\r\n            if (!(item.name in names)) {\r\n                names[item.fullName] = item;\r\n            }\r\n        });\r\n        return names;\r\n\r\n    }\r\n\r\n    getName(nameObject, arr: string[] = []) {\r\n        if (typeof (nameObject) === \"string\") {\r\n            arr.push(nameObject);\r\n        }\r\n        else if (nameObject.name) {\r\n            this.getName(nameObject.name, arr);\r\n        }\r\n        else if (nameObject.identifier) {\r\n            this.getName(nameObject.identifier, arr);\r\n        }\r\n        else if (nameObject.left) {\r\n            let n = <tss.QualifiedName>nameObject;\r\n            this.getName(n.left, arr);\r\n            this.getName(n.right, arr);\r\n        }\r\n        else if (nameObject.text) {\r\n            this.getName(nameObject, arr);\r\n        }\r\n        // else if (nameObject instanceof tss.EntityName) {\r\n        //     let n = <tss.QualifiedName>nameObject;        \r\n        //     getName(n.left, arr);\r\n        //     getName(n.right, arr);\r\n        // }\r\n        // else if (nameObject instanceof tss.Identifier) {\r\n        //     let n = <tss.Identifier>nameObject;\r\n        //     arr.push(n.text());\r\n        // }\r\n        return arr.join(\".\");\r\n    }\r\n\r\n\r\n    getBaseTypeNames(node: tss.Node) {\r\n        let results = [];\r\n        let clauses: tss.HeritageClause[];\r\n        if (node.kind === tss.SyntaxKind.ClassDeclaration) {\r\n            let casted = <tss.ClassLikeDeclaration>node;\r\n            clauses = casted.heritageClauses;\r\n        }\r\n        else if (node.kind === tss.SyntaxKind.InterfaceDeclaration) {\r\n            let casted = <tss.InterfaceDeclaration>node;\r\n            clauses = casted.heritageClauses;\r\n        }\r\n        if (clauses) {\r\n            for (let i = 0, len = clauses.length; i < len; i++) {\r\n                let clause = clauses[i];\r\n                if (clause.types) {\r\n                    for (let x = 0, len2 = clause.types.length; x < len2; x++) {\r\n                        let type = clause.types[x];\r\n                        if (type.expression.kind === tss.SyntaxKind.Identifier) {\r\n                            results.push(type.expression.getText());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return results;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    buildNodesNew(nodes: tss.Node[]) {\r\n        let supportedType = tss.SyntaxKind.ClassDeclaration | tss.SyntaxKind.InterfaceDeclaration | tss.SyntaxKind.ModuleDeclaration;\r\n        nodes = nodes.filter((n) => NodeItem.IsSupportedKindNode(n));\r\n        let results: NodeItem[] = [];\r\n        for (let i = 0, len = nodes.length; i < len; i++) {\r\n            let node = nodes[i];\r\n            let nodeItem = NodeItem.fromNode(node);\r\n            results.push(nodeItem);\r\n        }\r\n        this.resolveNodes(results);\r\n        return results;\r\n    }\r\n\r\n    getNodeList(nodes: NodeItem[]): INodeList {\r\n        let dictionary = {};\r\n        nodes.forEach((n) => {\r\n            dictionary[n.FullName] = n;\r\n        });\r\n        return dictionary;\r\n    }\r\n\r\n    resolveNodes(nodes: NodeItem[]) {\r\n        const dictionary = this.getNodeList(nodes);\r\n        for (let i = 0, len = nodes.length; i < len; i++) {\r\n            let node = nodes[i];\r\n            node.resolveParent(dictionary);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    buildNodes(items: IAstProcessedItem): INodeList {\r\n        let nodeList: INodeList = {};\r\n        for (let name in items) {\r\n            let item = items[name];\r\n            if (item.kind === tss.SyntaxKind.ModuleDeclaration) {\r\n                let fullNameSplit = item.fullName.split(\".\");\r\n                let lastNode: NodeItem = null;\r\n                let fullName: string[] = [];\r\n                fullNameSplit.forEach((splitName) => {\r\n                    fullName.push(splitName);\r\n                    let fullNameCurrent = fullName.join(\".\");\r\n                    let nodeItem: NodeItem = null;\r\n                    if (lastNode) {\r\n                        nodeItem = lastNode.Children[splitName];\r\n                    }\r\n                    else {\r\n                        nodeItem = nodeList[fullNameCurrent];\r\n                    }\r\n                    if (!nodeItem) {\r\n                        let newNode = new NodeItem();\r\n                        nodeItem = newNode;\r\n                        newNode.Name = splitName;\r\n                        newNode.FullName = fullNameCurrent;\r\n                        newNode.KindName = \"Module\";\r\n                        newNode.Loc = item.loc;\r\n                        nodeList[newNode.FullName] = newNode;\r\n                        if (lastNode) {\r\n                            newNode.Parent = lastNode;\r\n                            lastNode.Children[newNode.Name] = newNode;\r\n                        }\r\n                    }\r\n                    lastNode = nodeItem;\r\n                });\r\n            }\r\n        }\r\n        for (let name in items) {\r\n            let item = items[name];\r\n            if (item.kind === tss.SyntaxKind.ClassDeclaration || item.kind === tss.SyntaxKind.InterfaceDeclaration) {\r\n                let classPath = item.fullName.replace(\".\" + item.name, \"\");\r\n                let parentNode = nodeList[classPath];\r\n                let newNode = new NodeItem();\r\n                newNode.KindName = item.kind === tss.SyntaxKind.ClassDeclaration ? \"Class\" : \"Interface\";\r\n                newNode.FullName = item.fullName;\r\n                newNode.Loc = item.loc;\r\n                newNode.Name = item.name;\r\n                newNode.Parent = parentNode;\r\n                if (parentNode) {\r\n                    parentNode.Children[item.name] = newNode;\r\n                }\r\n                nodeList[newNode.FullName] = newNode;\r\n            }\r\n        }\r\n\r\n\r\n        return nodeList;\r\n    }\r\n\r\n\r\n    forEachSyntaxList(list: any[], func: (item: any, index?: number) => void) {\r\n        let count = list.length;\r\n        for (let i = 0; i < count; i++) {\r\n            func(list[i], i);\r\n        }\r\n    }\r\n\r\n\r\n    enumerate(unit, masterArr: IAstEnumeratorItem[] = [], lastModuleName = \"\") {\r\n        let modules = null;\r\n        let classes = null;\r\n        let kind = unit.kind();\r\n        let fullName = null;\r\n        let name = null;\r\n        if (lastModuleName) {\r\n            name = this.getName(unit);\r\n            fullName = lastModuleName + \".\" + name;\r\n        }\r\n        else {\r\n            fullName = this.getName(unit);\r\n            name = fullName;\r\n        }\r\n        let kindName = this.getKindName(kind);\r\n        switch (kind) {\r\n            case tss.SyntaxKind.ModuleDeclaration:\r\n                let m = <tss.ModuleDeclaration>unit;\r\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: m.getEnd() - m.getStart() });\r\n                lastModuleName = fullName;\r\n                this.forEachSyntaxList(m.getChildren(), (item) => {\r\n                    this.enumerate(item, masterArr, lastModuleName);\r\n                });\r\n                break;\r\n\r\n            case tss.SyntaxKind.ClassDeclaration:\r\n                let c = <tss.ClassDeclaration>unit;\r\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: c.getEnd() - c.getStart() });\r\n                this.forEachSyntaxList(c.getChildren(), (item) => {\r\n                    this.enumerate(item, masterArr);\r\n                });\r\n                break;\r\n            case tss.SyntaxKind.InterfaceDeclaration:\r\n                let ix = <tss.ClassDeclaration>unit;\r\n                masterArr.push({ fullName: fullName, name: name, kindName: kindName, kind: kind, loc: ix.getEnd() - ix.getStart() });\r\n                break;\r\n            case tss.SyntaxKind.VariableDeclaration:\r\n                break;\r\n        }\r\n\r\n\r\n        return masterArr;\r\n    }\r\n\r\n\r\n    getKindName(kind: tss.SyntaxKind) {\r\n        switch (kind) {\r\n            case tss.SyntaxKind.ModuleDeclaration:\r\n                return \"Module\";\r\n            case tss.SyntaxKind.ClassDeclaration:\r\n                return \"Class\";\r\n        }\r\n        return \"Unknown\";\r\n    }\r\n\r\n    enumerateAndFindDependencies(unit, items: IAstProcessedItem, nodes: INodeList, lastModuleName = \"\", lastNode?: NodeItem) {\r\n        let modules = null;\r\n        let name = null;\r\n        let classes = null;\r\n        let kind = unit.kind();\r\n        let fullName = null;\r\n        if (lastModuleName) {\r\n            name = this.getName(unit);\r\n            fullName = lastModuleName + \".\" + name;\r\n        }\r\n        else {\r\n            fullName = this.getName(unit);\r\n            name = fullName;\r\n        }\r\n        let kindName = this.getKindName(kind);\r\n        switch (kind) {\r\n            case tss.SyntaxKind.SourceFile:\r\n            case tss.SyntaxKind.ModuleDeclaration:\r\n                let m = <tss.ModuleDeclaration>unit;\r\n                lastModuleName = fullName;\r\n                this.forEachSyntaxList(m.getChildren(), (item) => {\r\n                    this.enumerateAndFindDependencies(item, items, nodes, lastModuleName);\r\n                });\r\n                break;\r\n\r\n            case tss.SyntaxKind.ClassDeclaration:\r\n                let c = <tss.ClassDeclaration>unit;\r\n\r\n                let currentNode = nodes[fullName];\r\n                this.forEachSyntaxList(c.heritageClauses, (item) => {\r\n                    if (item.types) {\r\n                        for (let i = 0; i < item.types.length; i++) {\r\n                            let name = this.getName(item.types[i]);\r\n                            let newName = lastModuleName + \".\" + name;\r\n                            let node = nodes[newName];\r\n                            if (!node) {\r\n                                let alternateName = lastModuleName.substring(0, lastModuleName.lastIndexOf(\".\") + 1) + name;\r\n                                node = nodes[alternateName];\r\n                            }\r\n                            if (node) {\r\n                                currentNode.BaseTypes.push(node);\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                });\r\n                this.forEachSyntaxList(c.getChildren(), (item) => {\r\n                    this.enumerateAndFindDependencies(item, items, nodes, lastModuleName, currentNode);\r\n                });\r\n                break;\r\n            case tss.SyntaxKind.VariableDeclaration:\r\n                break;\r\n        }\r\n\r\n\r\n        return nodes;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}